import com.liferay.gradle.util.OSDetector
import com.liferay.gradle.util.StringUtil

import java.text.DateFormat
import java.text.SimpleDateFormat

import java.util.Date
import java.util.TimeZone

import org.gradle.util.GUtil

apply plugin: "com.liferay.node"

configurations {
	remoteApp
}

task buildRemoteApp
task forceDeploy
task zipRemoteApp(type: Zip)

DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd.HHmm")

dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"))

String dateString = dateFormat.format(new Date())

artifacts {
	remoteApp zipRemoteApp
}

dependencies {
	remoteApp ext: "zip", group: "com.liferay", name: "com.liferay.site.initializer.raylife.remote.app", version: "20211011.1724"
}

forceDeploy {
	finalizedBy deploy
}

node {
	global = false
	nodeVersion = "14.17.6"
	useNpm = false
}

processResources {
	ResolvedConfiguration remoteAppResolvedConfiguration = configurations.remoteApp.getResolvedConfiguration()

	if (gradle.startParameter.taskNames.contains("forceDeploy") || remoteAppResolvedConfiguration.hasError()) {
		dependsOn buildRemoteApp

		into("site-initializer/documents/remote-app") {
			from new File(buildDir, "remote-app")
		}
	}
	else {
		into("site-initializer/documents/remote-app") {
			from zipTree(configurations.remoteApp.singleFile)
		}
	}
}

uploadRemoteApp {
	doLast {
		File buildGradleFile = file("build.gradle")

		String content = buildGradleFile.getText("UTF-8")

		content = content.replaceFirst(~/remoteApp ext: "zip", group: "com.liferay", name: "com.liferay.site.initializer.raylife.remote.app", version: "(\w+\.\w+)"/) {
			String all, String versionString ->

			all.replace versionString, dateString
		}

		buildGradleFile.setText content, "UTF-8"
	}

	repositories {
		mavenDeployer {
			pom {
				artifactId = GUtil.loadProperties(file("bnd.bnd"))["Bundle-SymbolicName"] + ".remote.app"
				groupId = "com.liferay"
				version = dateString
			}
		}
	}
}

zipRemoteApp {
	dependsOn buildRemoteApp

	archiveName "remote-app.zip"
	destinationDir new File(buildDir, "dist")
	from new File(buildDir, "remote-app")
}

_createRemoteAppTasks()

private void _createRemoteAppTasks() {
	File dir = new File(projectDir, "remote-app")

	String suffix = dir.name.replaceAll(/[\.-](\w)/) {
		return it[1].toUpperCase()
	}

	Task yarnInstallTask = tasks.create(name: "yarnInstall" + StringUtil.capitalize(suffix), type: Exec) {
		if (OSDetector.windows) {
			executable "cmd.exe"

			args "/c"
			args new File(node.nodeDir, "node.exe")
			args new File(node.nodeDir, "node_modules/yarn/yarn-" + node.yarnVersion + ".js")
		}
		else {
			executable new File(node.nodeDir, "bin/node")

			args new File(node.nodeDir, "lib/node_modules/yarn/yarn-" + node.yarnVersion + ".js")
		}

		args "install"
		dependsOn downloadNode
		workingDir dir
	}

	Task yarnBuildTask = tasks.create(name: "yarnBuild" + StringUtil.capitalize(suffix), type: Exec) {
		if (OSDetector.windows) {
			executable "cmd.exe"

			args "/c"
			args new File(node.nodeDir, "node.exe")
			args new File(node.nodeDir, "node_modules/yarn/yarn-" + node.yarnVersion + ".js")
		}
		else {
			executable new File(node.nodeDir, "bin/node")

			args new File(node.nodeDir, "lib/node_modules/yarn/yarn-" + node.yarnVersion + ".js")
		}

		args "build"
		dependsOn yarnInstallTask
		workingDir dir

		doLast {
			copy {
				from new File(dir, "build/static")
				include "js/*.js"
				into new File(buildDir, "remote-app")
			}
		}
	}

	buildRemoteApp.finalizedBy yarnBuildTask
}